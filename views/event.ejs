<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="https://use.typekit.net/mev6qqe.css">
    <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300..700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/createevents.css">
</head>
<body>
    <div class="navLogo">
      <a href= "http://localhost:3000">
        <p>GT<span class="word">W</span>O</p>
      </a>
    </div>

  <div class="container">

      <form id="eventForm" method="POST" action="/events/eventForm" enctype="multipart/form-data">


        <h1 id="currentPageTitle">Create An Event</h1>
        <div class="formBox">
            <h4>Upload thumbnail of event</h4>
            <!-- <button id="button" class="uploadFileButton">Browse File</button> -->
            <div class="thumbnail-file">
                <input type="file" name="thumbnail" id="thumbnail-file">
                <div id="ai-thumbnail-display"></div>
            </div>
             <h5>(Upload a picture of the event on the community bulletin board)</h5>


                <div class="thumbAi">

                    <button type="button" id="previewAi" class="thumbAi-btn">
                        <img src="images/generate-thumbnail.png" alt="ai" height = "30" class="generate-thumbnail">
                        <h6 class = "button-text">Generate Thumbnail with Artificial Intelligence</h6>
                    </button>
                </div>




            <div class="sects">
                <label for="eventTitle">Event Title *</label><br>
                <input name="title" id="eventTitle" class="textareas" value="" required></input><br>
            </div>

            <div class="">
                <label for="Author">Author *</label><br>
                <input name="author" id="author" class="textareas" value="" required></input><br>
            </div>

            <div class="sects">
                <label for="Description">Event Description *</label><br>
                <textarea name="description" id="Description" required></textarea><br>
            </div>

            <div class="tags">
                <label for="Tags" class="tags">Tags</label>
                <input name="tags" id="tags" class="textareas" value="" required></input><br>
            </div>

            <div class="location-div">
                <label for="Location" class="locationLabel">Location</label><br>
                <input name="location" id="Location" class="textareas" value="" required placeholder="Location, City, State, Zip Code"></input><br>
            </div>



            <div class="times">

                <div class="event-date">
                    <label for="Date">Date</label><br>
                    <input type="date" name="date" id="Date" required value="2025-01-16">
                </div>

                <div class="time-start">
                    <label for="Time" class="timeLabel">Time Start</label></br>
                    <input type="time" name="startTime" id="t-start" required value="17:10">
                </div>

                <div class="time-end">
                    <label for="Time" class="timeLabel">Time End</label></br>
                    <input type="time" name="endTime" id="t-end" required value="17:10">
                </div>


            </div>
                <button type="button" id="previewButton" class="createEvent">Continue</button>
            </form>

          </div>
        </div>
    </div>
    <div class="popup-overlay" id="preview-overlay">
        <div class="thumbPreview" id="thumbPreview">
            <span class="close" id="close-preview">&times;</span>
            <h7 class= "gradient-text" > Genarate Thumbnail with Artifiical Intelligence</h7>
            <p>Please type in a short description of the image you'd like to generate as your thumbnail.</p>
            <input class="textbox"  id="textbox" name="textbox"/>
            <button class="gradient-button" id="generate-thumbnail">Generate Thumbnail</button>
        </div>


<<<<<<< HEAD
            <div class="sects">
                <label for="eventAuthor">Event Author *</label><br>
                <input name="Author" id="eventAuthor" class="textareas" value="a" required></input><br>
            </div>

            <div class="sects">
                <label for="Description">Event Description *</label><br>
                <textarea name="description" id="Description" required>a</textarea><br>
            </div>
=======
>>>>>>> 6e9234cbbcfa8f5bce9beecd32fd55a68e7ffda3

   </div>



    <div id="previewModal">
        <div class="preview-modal-content" >
            <h2>Preview Your Event</h2>
            <div id="previewContent">
                <!-- Image will be added here dynamically by JavaScript -->
            </div>
            <div class="preview-actions">
                <button id="editBtn">Edit</button>
                <button id="confirmBtn">Confirm</button>
            </div>
        </div>
    </div>
    <script>

    const previewOverlay = document.getElementById('preview-overlay');
    const thumbPreview = document.getElementById('thumbPreview');
    const previewAi = document.getElementById('previewAi');
    const closePreview = document.getElementById('close-preview');
    const generateThumbnail = document.getElementById('generate-thumbnail');
    const textbox = document.getElementById('textbox');
        const eventForm = document.getElementById('eventForm');
        const previewButton = document.getElementById('previewButton');
        const previewModal = document.getElementById('previewModal');
        const previewContent = document.getElementById('previewContent');
        const editBtn = document.getElementById('editBtn');
        const confirmBtn = document.getElementById('confirmBtn');
    const thumbnailFileDiv = document.querySelector('.thumbnail-file');
    const aiThumbnailDisplay = document.getElementById('ai-thumbnail-display');
        // const ageRangeMap = {
        //     '1': 'Not Selected',
        //     '2': 'age 5-10',
        //     '3': 'age 10-15',
        //     '4': 'age 15-18',
        //     '5': 'age 18-30'
        // };

        // const categoryMap = {
        //     '0': 'Not Selected',
        //     '1': 'Category 1',
        //     '2': 'Category 2',
        //     '3': 'Category 3',
        //     '4': 'Category 4'
        // };



     previewAi.addEventListener('click', () => {
     previewOverlay.style.display = "flex";
    });
    // event.ejs JavaScript <script> block



    generateThumbnail.addEventListener('click', async () => {
        const description = textbox.value.trim();
        if (!description) {
            alert("Please provide a description for the AI to generate a thumbnail.");
            generateThumbnail.textContent = 'Generate Thumbnail';
            generateThumbnail.disabled = false;
            return;
        }
        generateThumbnail.textContent = 'Generating...';
        generateThumbnail.disabled = true;
        console.log("Attempting to generate thumbnail with description:", description);
        let result = null;
        try {
            const response = await fetch(`/events/generateThumbnail`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ description: description })
            });
            if (!response.ok) {
                let errorDetails = "Unknown server error.";
                try {
                    const errorData = await response.json();
                    errorDetails = errorData.error || errorDetails;
                } catch (jsonError) {
                    errorDetails = response.statusText;
                }
                throw new Error(`AI generation failed: ${response.status} - ${errorDetails}`);
            }
            result = await response.json();
            if (result.success && result.imageData) {
                document.getElementById('thumbnail-file').style.display = 'none';
                aiThumbnailDisplay.innerHTML = '';
                const generatedImg = document.createElement('img');
                generatedImg.src = `data:${result.mimeType};base664,${result.imageData}`;
                generatedImg.style.maxWidth = '100%';
                generatedImg.style.height = 'auto';
                generatedImg.style.display = 'block';
                generatedImg.style.border = '1px solid red';
                generatedImg.style.minHeight = '100px';
                generatedImg.style.backgroundColor = '#f0f0f0';
                aiThumbnailDisplay.appendChild(generatedImg);
                sessionStorage.setItem('generatedAiThumbnailData', JSON.stringify({
                    data: result.imageData,
                    mime: result.mimeType
                }));
                alert("AI Thumbnail generated successfully!");
                previewOverlay.style.display = 'none';
            } else {
                alert("Failed to generate AI Thumbnail: " + (result.error || "Server indicated failure."));
            }
        } catch (error) {
            console.error("Error during AI thumbnail generation request:", error);
            alert(error.message);
        } finally {
            generateThumbnail.textContent = 'Generate Thumbnail';
            generateThumbnail.disabled = false;
        }
    });

     closePreview.addEventListener('click', () => {
    previewContent.innerHTML = "";
    previewOverlay.style.display = 'none';})

    /*generateThumbnail.addEventListener('click', async (event) => {
        event.preventDefault();
    });
    */


          previewButton.addEventListener('click', (event) => {
    event.preventDefault();

    if (eventForm.checkValidity()) {
        previewContent.innerHTML = "";

        const previewFields = [
            { label: 'Event Title', value: document.getElementsByName('title')[0].value },
            { label: 'Event Author', value: document.getElementsName('author')[0].value },
            { label: 'Event Description', value: document.getElementsByName('description')[0].value },
            { label: 'Date', value: document.getElementsByName('date')[0].value },
            { label: 'Time Start', value: document.getElementsByName('startTime')[0].value },
            { label: 'Time End', value: document.getElementsByName('endTime')[0].value },
            { label: 'Location', value: document.getElementsByName('location')[0].value },
            { label: 'Tags', value: document.getElementsByName('tags')[0].value }
        ];


        const thumbnailFile = document.getElementsByName('thumbnail')[0].files[0];
        if (thumbnailFile) {
            const img = document.createElement('img');
            img.src = URL.createObjectURL(thumbnailFile);
            img.style.maxWidth = '200px';
            previewContent.appendChild(img);

            previewFields.push({
                label: 'Event Thumbnail',
                value: thumbnailFile
            });
        }


        previewFields.forEach(function(field) {
            const previewItem = document.createElement('div');
            previewItem.classList.add('preview-item');

            let displayValue = "";

            if (field.label === "Event Thumbnail" && typeof field.value === "string") {
                displayValue = field.value;
            } else if (typeof field.value === "object" && field.value !== null && "name" in field.value) {
                displayValue = field.value.name;
            } else {
                displayValue = field.value;
            }

            previewItem.innerHTML = `
                <strong>${field.label}:</strong>
                <span>${displayValue}</span>
            `;
            previewContent.appendChild(previewItem);
        });


        previewModal.style.display = 'block';
    } else {
        eventForm.reportValidity();
    }
            });

            editBtn.addEventListener('click', () => {
                previewModal.style.display = 'none';
            });

            confirmBtn.addEventListener('click', async () => {
                const formData = new FormData(eventForm);

                try {
                    const response = await fetch("/events/eventForm", {
                        method: "POST",
                        body: formData,
                    });
                    const result = await response.json();

                    if (result.success) {
                        console.log("Event created successfully:", result.data);
                        window.location.href = `/events/event/${result.id}`;
                    } else {
                        console.error("Error creating event:", result.error);
                        alert("Failed to create event. Please try again.");
                    }
                } catch (error) {
                    console.error("Submission error:", error);
                    alert("An error occurred while submitting the event.");
                }
            });
</script>
</body>
</html>
